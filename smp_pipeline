# Segmentation task simplest pipeline 
# Cause i am lazy af


HEIGHT: int = 512 
WIDTH: int = 512

def get_simplest_augmentation():

    train_transform = [
        albu.LongestMaxSize(max_size = 512, p = 1), 
        albu.PadIfNeeded(min_height=HEIGHT, min_width=WIDTH, always_apply=True, border_mode=0),
    ]
    return albu.Compose(train_transform)

def get_training_augmentation():
    train_transform = [
        albu.LongestMaxSize(max_size=1024, p=1),
        albu.HorizontalFlip(p=0.5),

        albu.ShiftScaleRotate(scale_limit=0.5, rotate_limit=0, shift_limit=0.1, p=1, border_mode=0),

        albu.PadIfNeeded(min_height=HEIGHT, min_width=WIDTH, always_apply=True, border_mode=0),
        albu.RandomCrop(height=HEIGHT, width=WIDTH, always_apply=True),

        albu.GaussNoise(p=0.2),
        #albu.IAAPerspective(p=0.5),

        albu.OneOf(
            [
                albu.CLAHE(p=1),
                albu.RandomBrightness(p=1),
                albu.RandomGamma(p=1),
            ],
            p=0.9,
        ),

        albu.OneOf(
            [
                albu.Sharpen(p=1),
                albu.Blur(blur_limit=3, p=1),
                albu.MotionBlur(blur_limit=3, p=1),
            ],
            p=0.9,
        ),

        albu.OneOf(
            [
                albu.RandomContrast(p=1),
                albu.HueSaturationValue(p=1),
            ],
            p=0.9,
        ),
    ]
    return albu.Compose(train_transform)


def get_validation_augmentation():
    """Add paddings to make image shape divisible by 32"""
    test_transform = [
        albu.PadIfNeeded(384, 480)
    ]
    return albu.Compose(test_transform)


def to_tensor(x, **kwargs):
    return x.transpose(2, 0, 1).astype('float32')


def get_preprocessing(preprocessing_fn):
    """Construct preprocessing transform
    
    Args:
        preprocessing_fn (callbale): data normalization function 
            (can be specific for each pretrained neural network)
    Return:
        transform: albumentations.Compose
    
    """
    
    _transform = [
        albu.Lambda(image=preprocessing_fn),
        albu.Lambda(image=to_tensor, mask=to_tensor),
    ]
    return albu.Compose(_transform)



def main():
    model_CFG = CFG.ModelParamsCFG()
    _classes = list(model_CFG.classes_colors_dict.keys())

    image_paths = load_dataset_file_paths(CFG.PathsCFG.image_dir_paths)
    mask_paths = load_dataset_file_paths(CFG.PathsCFG.mask_dir_paths)

    HEIGHT: int = 512 
    WIDTH: int = 512

    #dl = DatasetLoader(img_paths = image_paths, mask_paths= mask_paths, transforms= get_training_augmentation())
    dl = DatasetLoader(img_paths = image_paths, mask_paths= mask_paths, transforms= get_simplest_augmentation())


    N_EPOCHS: int = 40
    ENCODER = 'efficientnet-b5'
    ENCODER_WEIGHTS = 'imagenet' 
    CLASSES = _classes
    ACTIVATION = 'softmax2d' # could be None for logits or 'softmax2d' for multiclass segmentation
    DEVICE = 'cuda'
    N_CLASSES = len(_classes)

    # create segmentation model with pretrained encoder
    model = smp.Unet(
        encoder_name=ENCODER, 
        encoder_weights=ENCODER_WEIGHTS, 
        classes=N_CLASSES, 
        activation=ACTIVATION,
    )

    train_loader = DataLoader(dl, batch_size=1, shuffle=True, num_workers=4)

    loss = smp.utils.losses.DiceLoss( 
    beta = 0.2
    )
    metrics = [
        smp.utils.metrics.IoU(threshold=0.5)
    ]

    optimizer = torch.optim.AdamW([ 
        dict(params=model.parameters(), lr=0.0001),
    ])

    # create epoch runners 
    # it is a simple loop of iterating over dataloader`s samples
    train_epoch = smp.utils.train.TrainEpoch(
        model, 
        loss=loss,   
        metrics=metrics, 
        optimizer=optimizer,
        device=DEVICE,
        verbose=True,
    )


    # train model for 40 epochs
    max_score = 0
    for i in range(0, 40):

        print('\nEpoch: {}'.format(i))
        train_logs = train_epoch.run(train_loader)
        #valid_logs = valid_epoch.run(valid_loader)

        logging.warning("Passed")
        # do something (save model, change lr, etc.)
        if max_score < train_logs['iou_score']:
            max_score = train_logs['iou_score']
            torch.save(model, './best_model.pth')
            print('Model saved!')
            
        if i == 25:
            optimizer.param_groups[0]['lr'] = 1e-5
            print('Decrease decoder learning rate to 1e-5!')

if __name__ == "__main__":
    main()
